package com.erudika.para.client;

import java.io.Serializable;
import java.util.List;

/**
 * 
 * @author qhuynh
 *
 */
public interface ParaObject extends Serializable, Votable {

    /**
     * The id of an object. Usually an autogenerated unique string of numbers.
     * @return the id
     */
	public String getId();

    /**
     * The URI of this object. For example: /users/123
     * @return the URI
     * @see com.erudika.para.utils.Utils#getObjectURI(com.erudika.para.core.ParaObject, boolean, boolean)
     */
	public String getObjectURI();
	
    /**
     * The name of the object's class. This is equivalent to {@link Class#getSimpleName()}.toLowerCase()
     * @return the simple name of the class
     */
    public String getType();

	void setId(String id);

	void setType(String type);

	String getAppid();

	void setAppid(String appid);

	List<String> getTags();

	void setTags(List<String> tags);

	Boolean getStored();

	void setStored(Boolean stored);

	public Boolean getIndexed() ;
	public void setIndexed(Boolean indexed) ;
	public Boolean getCached() ;
	public void setCached(Boolean cached) ;
	public Long getTimestamp() ;
	public void setTimestamp(Long timestamp) ;
	public String getCreatorid() ;
	public void setCreatorid(String creatorid) ;
	public String getName() ;
	public void setName(String name) ;
	public String getPlural() ;
	public String getParentid() ;
	public void setParentid(String parentid) ;
	public Long getUpdated() ;
	public void setUpdated(Long updated) ;
	public String create() ;
	public void update() ;
	public void delete() ;
	public boolean exists() ;
	public boolean voteUp(String userid) ;
	public boolean voteDown(String userid) ;
	public Integer getVotes() ;
	public void setVotes(Integer votes) ;
	public Long getVersion() ;
	public void setVersion(Long version) ;
	public Long countLinks(String type2) ;
	public List<Linker> getLinks(String type2, Pager... pager) ;
	public <P extends ParaObject> List<P> getLinkedObjects(String type, Pager... pager) ;
	public <P extends ParaObject> List<P> findLinkedObjects(String type, String field, String query, Pager... pager) ;
	public boolean isLinked(String type2, String id2) ;
	public boolean isLinked(ParaObject toObj) ;
	public String link(String id2) ;
	public void unlink(String type, String id2) ;
	public void unlinkAll() ;
	public Long countChildren(String type) ;
	public <P extends ParaObject> List<P> getChildren(String type, Pager... pager) ;
	public <P extends ParaObject> List<P> getChildren(String type, String field, String term, Pager... pager) ;
	public <P extends ParaObject> List<P> findChildren(String type, String query, Pager... pager) ;
	public void deleteChildren(String type) ;
	public String toString() ;
}
